[mqtt]
## URL of the MQTT server.
## Use tls:// for encrypted and tcp:// for plain connections.
url = "tcp://test.mosquitto.org:1883"
# url = "tls://test.mosquitto.org:8883"

## Credentials for MQTT server
# username = "user"
# password = "password"

## Unique ID of this client. A random ID is generated if no ID is configured.
# clientid = "mqlux-0815"

## Use tls_server_insecure or tls_server_cert, if you use tls
## connection and the server uses a self-signed certificate.
##
## Disable TLS certificate check
# tls_server_insecure = true
#
## Server certificate as PEM. Query with:
##  echo | openssl s_client -servername mainframe.io \
##    -connect mainframe.io:8883 2>/dev/null | openssl x509
# tls_server_cert = """
# -----BEGIN CERTIFICATE-----
# MIICqjCC..........
# -----END CERTIFICATE-----
# """

## Keepalive enables an optional watchdog. mqlux terminates if it does
## not receive any message within this duration. 
# keepalive = "2m"

## For testing: Write all incoming MQTT messages as CSV
# csvlog = "-" # to stdout
# csvlog = "/tmp/mqtt.log"  # to file


## Configuration for the InfluxDB destination.
# [influxdb]
# url = "http://127.0.0.1:8086"
# database = "database"
# username = "user"
# password = password"

## Use subscriptions to configure topics:
# [[subscription]]
## The MQTT topic:
# topic = "/sensors/kitchen/temperature"
## You can use regexp to match multiple topics:
# topic = "/sensors/[^/]+/temperature"
## Named capture groups are converted to tags:
# topic = "/sensors/(?P<location>[^/]+)/temperature"
#
## The measurement name for InfluxDB.
## Similar sensors should all share the same `measurement` name.
# measurement = "temperature"
#
## Forward retained messages if true (e.g. the last value stored by the MQTT server)
## Beware that MQTT messages have no timestamp and retained messages are recorded as *now*.
# include_retained = true
#
## Optional JavaScript parser script to convert MQTT payload to one or more InfluxDB
## records. See README.md and example below.
# script = """function parse(topic, payload) { return 42; }"""
#
# [subscription.tags]
## One or more tags (key=value) to distinguish between different sensors.
# room = "kitchen"


## Example subscription:
# [[subscription]]
# topic = "/sensors/kitchen/temperature"
# measurement = "temperature"
# [subscription.tags]
# sensor = "dht22"
# location = "kitchen"

## Similar subscription, but location tag is set from topic:
# [[subscription]]
# topic = "/sensors/(?P<location>[^/]+)/temperature"
# measurement = "temperature"
# [subscription.tags]
# sensor = "dht22"

## Example subscription with custom JavaScript parser that parses JSON
## and returns multiple independent records:
# [[subscription]]
# topic = "/net/devices"
# script = """
# function parse(topic, payload) { 
#     var data = JSON.parse(payload);
#     return [
#         {"measurement": "people", "value": data["peopleCount"]},
#         {"measurement": "devices_total", "value": data["deviceCount"]},
#         {"measurement": "devices_unknown", "value": data["unknownDevicesCount"]}
#     ];
# }
# """
